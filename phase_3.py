# -*- coding: utf-8 -*-
"""phase 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kcwwcHN3cNnFzIdkRF5MrwPKJsJJMQKD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Set random seed for reproducibility
np.random.seed(42)

# 1. Load or generate synthetic air quality data
def generate_air_quality_data(num_samples=1000):
    """Generate synthetic air quality data for demonstration"""
    data = {
        'PM2.5': np.random.uniform(0, 300, num_samples),
        'PM10': np.random.uniform(0, 400, num_samples),
        'NO2': np.random.uniform(0, 200, num_samples),
        'SO2': np.random.uniform(0, 100, num_samples),
        'CO': np.random.uniform(0, 10, num_samples),
        'O3': np.random.uniform(0, 200, num_samples),
        'Temperature': np.random.uniform(-10, 40, num_samples),
        'Humidity': np.random.uniform(20, 100, num_samples),
        'Wind_Speed': np.random.uniform(0, 30, num_samples),
    }

    # Calculate AQI (simplified formula for demonstration)
    df = pd.DataFrame(data)
    df['AQI'] = (0.3 * df['PM2.5'] + 0.2 * df['PM10'] + 0.15 * df['NO2'] +
                 0.15 * df['SO2'] + 0.1 * df['CO'] + 0.1 * df['O3']) + np.random.normal(0, 10, num_samples)

    return df

# Generate synthetic data
air_quality_df = generate_air_quality_data(1000)

# 2. Data Visualization - Bar graph of pollutant averages
plt.figure(figsize=(10, 6))
pollutants = ['PM2.5', 'PM10', 'NO2', 'SO2', 'CO', 'O3']
avg_pollutants = air_quality_df[pollutants].mean()
avg_pollutants.plot(kind='bar', color=['red', 'orange', 'yellow', 'green', 'blue', 'purple'])
plt.title('Average Pollutant Levels')
plt.ylabel('Concentration (µg/m³)')
plt.xlabel('Pollutants')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# 3. Prepare data for ML
X = air_quality_df.drop(columns=['AQI'])
y = air_quality_df['AQI']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 4. Train Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# 5. Make predictions
y_pred = model.predict(X_test_scaled)

# 6. Evaluate model
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation Metrics:")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R²): {r2:.2f}")

# 7. Feature Importance Visualization
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': model.feature_importances_
}).sort_values('Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance, palette='viridis')
plt.title('Feature Importance for AQI Prediction')
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.tight_layout()
plt.show()

# 8. Actual vs Predicted AQI Visualization
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--r')
plt.xlabel('Actual AQI')
plt.ylabel('Predicted AQI')
plt.title('Actual vs Predicted AQI Values')
plt.grid(True)
plt.show()

# 9. Error Distribution Visualization
errors = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.histplot(errors, bins=30, kde=True)
plt.title('Distribution of Prediction Errors')
plt.xlabel('Prediction Error (Actual - Predicted)')
plt.ylabel('Frequency')
plt.axvline(x=0, color='r', linestyle='--')
plt.show()

# 10. AQI Category Distribution (Bar Graph)
def categorize_aqi(aqi):
    if aqi <= 50: return 'Good'
    elif aqi <= 100: return 'Moderate'
    elif aqi <= 150: return 'Unhealthy for Sensitive Groups'
    elif aqi <= 200: return 'Unhealthy'
    elif aqi <= 300: return 'Very Unhealthy'
    else: return 'Hazardous'

air_quality_df['AQI_Category'] = air_quality_df['AQI'].apply(categorize_aqi)
category_counts = air_quality_df['AQI_Category'].value_counts()

plt.figure(figsize=(10, 6))
category_counts.plot(kind='bar', color=['green', 'yellow', 'orange', 'red', 'purple', 'maroon'])
plt.title('Distribution of AQI Categories')
plt.xlabel('AQI Category')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()